Starting audit...
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:31:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'getMana' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'getMana' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:35:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'setMana' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'setMana' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:35:25: Parameter mana should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:39:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:43:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:43:32: Parameter description should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:47:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'getColors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'getColors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:51:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'setColors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'setColors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:51:27: Parameter colors should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:55:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:59:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:59:25: Parameter name should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Card.java:63:5: Class 'Card' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Card' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\CursedOne.java:13:5: Class 'CursedOne' looks like designed for extension (can be subclassed), but the method 'useAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CursedOne' final or making the method 'useAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Disciple.java:6:21: Parameter input should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Disciple.java:13:5: Class 'Disciple' looks like designed for extension (can be subclassed), but the method 'useAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Disciple' final or making the method 'useAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Environment.java:18:5: Class 'Environment' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Environment' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:25:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:29:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:29:27: Parameter health should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:33:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'isHasAttacked' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'isHasAttacked' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:37:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setHasAttacked' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setHasAttacked' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:37:32: Parameter hasAttacked should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Hero.java:41:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:25:19: Parameter input should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:44:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:44:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:49:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:49:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:54:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:54:28: Parameter attacked should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:57:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'getAttackDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'getAttackDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:61:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setAttackDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setAttackDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:61:33: Parameter attackDamage should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:65:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'getHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'getHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:69:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:69:27: Parameter health should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:73:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'getRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'getRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:77:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:77:24: Parameter row should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:81:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'isFrozen' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'isFrozen' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:85:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setFrozen' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setFrozen' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:85:27: Parameter frozen should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:89:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'isHasAttacked' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'isHasAttacked' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:93:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setHasAttacked' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setHasAttacked' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:93:32: Parameter hasAttacked should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:97:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'isTank' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'isTank' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:101:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'setTank' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'setTank' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:101:25: Parameter tank should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Minion.java:105:5: Class 'Minion' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Minion' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\Miraj.java:14:5: Class 'Miraj' looks like designed for extension (can be subclassed), but the method 'useAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Miraj' final or making the method 'useAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\cards\TheRipper.java:14:5: Class 'TheRipper' looks like designed for extension (can be subclassed), but the method 'useAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TheRipper' final or making the method 'useAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Actions.java:12:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Actions.java:34:5: Method length is 180 lines (max allowed is 150). [MethodLength]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Actions.java:34:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\DeckInit.java:29:17: switch without "default" clause. [MissingSwitchDefault]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\DeckInit.java:67:5: Class 'DeckInit' looks like designed for extension (can be subclassed), but the method 'getDeck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DeckInit' final or making the method 'getDeck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\DeckInit.java:71:5: Class 'DeckInit' looks like designed for extension (can be subclassed), but the method 'setDeck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DeckInit' final or making the method 'setDeck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\DeckInit.java:71:25: Parameter deck should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:13:5: Class 'Error' looks like designed for extension (can be subclassed), but the method 'getErr' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Error' final or making the method 'getErr' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:17:5: Class 'Error' looks like designed for extension (can be subclassed), but the method 'setErr' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Error' final or making the method 'setErr' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:17:24: Parameter err should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:21:5: Class 'Error' looks like designed for extension (can be subclassed), but the method 'getMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Error' final or making the method 'getMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:25:5: Class 'Error' looks like designed for extension (can be subclassed), but the method 'setMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Error' final or making the method 'setMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Error.java:25:28: Parameter message should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:59:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'resetError' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'resetError' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:59:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:59:40: 'err' hides a field. [HiddenField]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:64:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'gamePrep' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'gamePrep' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:64:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:74:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'pickUpCard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'pickUpCard' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:74:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:74:52: 'players' hides a field. [HiddenField]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:81:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'newRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'newRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:81:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:99:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getEnvInHand' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getEnvInHand' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:99:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:113:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'switchTurns' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'switchTurns' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:113:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:119:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:123:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:127:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:131:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:135:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getTurnsThisGame' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getTurnsThisGame' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:139:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:143:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setTurnsThisGame' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setTurnsThisGame' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:147:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:151:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getErr' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getErr' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:155:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setErr' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setErr' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:159:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'isGameEnded' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'isGameEnded' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:163:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setGameEnded' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setGameEnded' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:167:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getGameEndMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getGameEndMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Game.java:171:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setGameEndMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setGameEndMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:27:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getDeck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getDeck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:31:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setDeck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setDeck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:35:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getHand' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getHand' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:39:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setHand' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setHand' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:43:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getHero' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getHero' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:47:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setHero' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setHero' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:51:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getPlayerIdx' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getPlayerIdx' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:55:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setPlayerIdx' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setPlayerIdx' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:59:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getMana' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getMana' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:63:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setMana' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setMana' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:67:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getClosestRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getClosestRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Player.java:71:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setClosestRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setClosestRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Statistics.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:20:18: Parameter tabel should be final. [FinalParameters]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:36:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'placeCard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'placeCard' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:36:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:76:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:76:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:81:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getCardAtPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getCardAtPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:81:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:103:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'useEnvCard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'useEnvCard' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:103:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:161:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getFrozenCards' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getFrozenCards' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:161:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:175:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:175:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:202:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'isEnemyTank' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'isEnemyTank' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:202:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:219:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'useCardAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'useCardAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:219:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:255:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'attackHero' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'attackHero' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:255:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:280:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'checkHeroHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'checkHeroHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:280:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:296:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'useHeroAbility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'useHeroAbility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:296:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:364:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'belongsToCurrPlayer' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'belongsToCurrPlayer' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:378:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'resetAttacks' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'resetAttacks' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:378:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:387:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'checkHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'checkHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:387:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:402:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'setFrozenFalse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'setFrozenFalse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:402:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:420:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:424:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'setTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'setTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:428:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getBound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getBound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:432:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'getCurrTurn' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'getCurrTurn' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] S:\Facultate\Anul 2\Sem1\POO\Tema1_POO\.\src\classes\myClasses\Table.java:436:5: Class 'Table' looks like designed for extension (can be subclassed), but the method 'setCurrTurn' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Table' final or making the method 'setCurrTurn' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 141 errors.
